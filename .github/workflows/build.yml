name: 'build'

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - dev

env:
  PUBLIC_SERVICE_UUID: ${{ vars.PUBLIC_SERVICE_UUID }}
  PUBLIC_READ_WRITE_CHARACTERISTIC_UUID: ${{ vars.PUBLIC_READ_WRITE_CHARACTERISTIC_UUID }}
  PUBLIC_NOTIFY_CHARACTERISTIC_UUID: ${{ vars.PUBLIC_NOTIFY_CHARACTERISTIC_UUID }}

jobs:
  create-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v5

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: get version
        run: echo "PACKAGE_VERSION=$(bun -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        if: github.ref == 'refs/heads/main' # Only create releases from the main branch.
        id: create-release
        uses: actions/github-script@v8
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `app-v${process.env.PACKAGE_VERSION}`,
              name: `Desktop App v${process.env.PACKAGE_VERSION}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build-desktop:
    needs:
      - create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
            target: aarch64-apple-darwin
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'
            target: x86_64-apple-darwin
          - platform: 'ubuntu-latest'
            args: ''
            target: x86_64-unknown-linux-gnu
          - platform: 'windows-latest'
            target: x86_64-pc-windows-msvc
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v5

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest' # This must match the platform value defined above.
        run: |
          sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib clang lld libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: bun install --frozen-lockfile

      - name: build and release app
        if: github.ref == 'refs/heads/main' # Only publish releases from the main branch.
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: ${{ matrix.args }}

      - name: build app
        if: github.ref == 'refs/heads/dev' # Don't build the app if we already did it in the previous step.
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}-${{ matrix.target }}
          path: src-tauri/target/**/release/bundle

  build-android:
    needs:
      - create-release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: install dependencies
        run: |
          sudo apt update && sudo apt upgrade -y && sudo apt install -y build-essential gcc-multilib clang lld libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          targets: 'aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android'

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: bun install --frozen-lockfile

        # Java 17 for Android Gradle Plugin
      - name: Setup Java
        id: java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: '17'

      # Android SDK (cmdline-tools) + accept licenses
      - name: Setup Android SDK
        id: android
        uses: android-actions/setup-android@v3
        with:
          log-accepted-android-sdk-licenses: false

      - name: Install SDK/NDK components
        env:
          NDK_VERSION: '29.0.14033849'
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" \
                     "platforms;android-36" \
                     "build-tools;36.1.0" \
                     "build-tools;36.0.0" \
                     "build-tools;35.0.1" \
                     "ndk;$NDK_VERSION" \
                     "cmake;4.1.1"
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/$NDK_VERSION" >> $GITHUB_ENV

      - name: setup Android signing
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.TAURI_ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "keyPassword=${{ secrets.TAURI_ANDROID_KEY_PASSWORD }}" >> keystore.properties
          echo "storePassword=${{ secrets.TAURI_ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.TAURI_ANDROID_KEYSTORE_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - name: build android app
        run: bun tauri android build

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: |
            src-tauri/gen/android/app/build/outputs/**/*.apk
            src-tauri/gen/android/app/build/outputs/**/*.aab

  publish-release:
    if: github.ref == 'refs/heads/main' # Only publish releases from the main branch.
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create-release, build-desktop, build-android]

    steps:
      - uses: actions/checkout@v5

      - name: Download Android artifacts
        uses: actions/download-artifact@v5
        with:
          name: android-artifacts
          path: android-release

      - name: Upload Android artifacts to release
        uses: actions/github-script@v8
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Function to recursively find files with specific extensions
            function findFiles(dir, extensions) {
              const files = [];
              
              function searchDir(currentDir) {
                const items = fs.readdirSync(currentDir);
                
                for (const item of items) {
                  const fullPath = path.join(currentDir, item);
                  const stat = fs.statSync(fullPath);
                  
                  if (stat.isDirectory()) {
                    searchDir(fullPath);
                  } else if (extensions.some(ext => item.endsWith(ext))) {
                    files.push(fullPath);
                  }
                }
              }
              
              if (fs.existsSync(dir)) {
                searchDir(dir);
              }
              
              return files;
            }

            // Find APK and AAB files
            const androidFiles = findFiles('android-release', ['.apk', '.aab']);

            console.log(`Found ${androidFiles.length} Android files to upload`);

            for (const androidFile of androidFiles) {
              const fileName = path.basename(androidFile);
              const fileContent = fs.readFileSync(androidFile);
              
              console.log(`Uploading ${fileName} (${fileContent.length} bytes)`);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: process.env.release_id,
                name: fileName,
                data: fileContent,
              });
              
              console.log(`Successfully uploaded ${fileName} to release`);
            }

      - name: publish release
        id: publish-release
        uses: actions/github-script@v8
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
